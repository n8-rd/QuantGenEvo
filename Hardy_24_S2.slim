// a quantitative genetic take on a model relating robustness to
// evolvability. This version with plasticity and an environment that 
//varies over time.

function (logical)isIn(integer y, integer x){ 
	return any(asLogical(match(y, x)+1));
}

initialize() {
	initializeSLiMModelType("nonWF");
	defineConstant("Rep", rep); //replication number [rep]
	defineConstant("delta", de); //default capacitance
	defineConstant("tx", 100); //generation at which oX comes online [100]
	defineConstant("lp", 0.02); //probability of environmental fluctuation
	defineConstant("om0", 1.6); //initial weakness of selection [1.0]
	defineConstant("p0", q); //probability of plastic mutation
	defineConstant("R", 1.5); //birth rate [1.5]
	defineConstant("P", ps); //the breadth of allele effect distribution [ps]
	defineConstant("O1", -2.5); // phenotype optimum in phase 1 [-2.5]
	defineConstant("O2", 2.5); //optimum in phase 2 [2.5]
	defineConstant("K", 500); //size of population [500]
	defineConstant("M", K / (R-1));
	initializeMutationRate(1e-4); //[1e-4]
	initializeMutationType("m1", 0.5, "n", 0.0, P); //non-plastic alleles (rxn slope)
	initializeMutationType("m2", 0.5, "f", 0.0); //plastic alleles (rxn elevation)
	initializeGenomicElementType("g1", c(m1,m2), c(1-p0,p0));
	initializeGenomicElement(g1, 0, 9999);
	initializeRecombinationRate(1e-6); //[1e-6]
	m1.convertToSubstitution = F;
	m1.mutationStackPolicy = 'l';
	m2.convertToSubstitution = F;
	m2.mutationStackPolicy = 'l';
}

mutationEffect(m1) { return 1.0; }
mutationEffect(m2) { return 1.0; }

mutation(m2){ //plastic alleles
	re = rnorm(1, 0.0, P);
	cond = rbinom(1,1,0.5);
	mut.setValue("cond", cond);
	mut.setValue("eff", re);
	return T;
}

//simple clonal reproduction
reproduction() {
    fecundity = rpois(1, R);
    for (i in seqLen(fecundity)){
        offspring = subpop.addCloned(individual);
    }
}

//let's use a modifyChild() callback to calculate the niche phenotype value
//based on the m1 and m2 mutations
modifyChild(){
	muts1 = child.genomes.mutationsOfType(m1);
	muts2 = child.genomes.mutationsOfType(m2);
	freeo = size(muts1) ? child.sumOfMutationsOfType(m1) else 0.0;
	elevation = size(muts1) ? child.sumOfMutationsOfType(m1) else 0.0;
	Ei = sim.getValue("Ei");
	pp = 0.0;
	if (size(muts2)){
	    matches = abs(muts2.getValue("cond") - Ei);
	    pp = sum(muts2.getValue("eff")*matches);
	}
	pheno = elevation + pp + sim.getValue("baseP");
	child.setValue("p", pheno);
	child.setValue("fr", freeo);
	return T;
}

// set up metapopulation
// and give individuals their initial phenotype states
1 early() {
	sim.addSubpop("p1", K);
	sim.subpopulations.individuals.setValue("p", 0.0);
	sim.setValue("baseP", 0.0);
	sim.setValue("Ei", 0);
}

//make the environment fluctuate between states
1: late(){
    //toggle
    if (rbinom(1,1,lp)==1){
        oldE = sim.getValue("Ei");
        newE = abs(oldE-1);
        sim.setValue("Ei", newE);
    }
}


//do selection and regulation
1: early(){
	inds = sim.subpopulations.individuals;
	scale = dnorm(0.0, 0.0, om0);
	phenos = inds.getValue("p");
	y = dnorm(inds.getValue("p"), O1, om0)/(1.5*scale);//[1.2]
	z = dnorm(inds.getValue("p"), O2, om0)/scale;
	if (sim.cycle < tx){
		inds.fitnessScaling = y + 0.5; //easy does it
	} else {
		inds.fitnessScaling = y + z;
	}
	n_t_plus_pt5 = sum(inds.age == 0);
	p1.fitnessScaling = 1 / (1 + (n_t_plus_pt5 / R) / M);
}

//save some memory
//add the effects of any fixed alleles to the base phenotypes, then remove the mutations
late(){
	inds = sim.subpopulations.individuals;
	muts1 = inds.genomes.mutationsOfType(m1);
	freqs = sim.mutationFrequencies(p1, muts1);
	fixed = which(freqs==1.0);
	fixedMuts = muts1[fixed];
	fixedEffs = sum(fixedMuts.selectionCoeff);
	inds.genomes.removeMutations(fixedMuts);
    oldBase = sim.getValue("baseP");
    sim.setValue("baseP", oldBase + fixedEffs);
}

//do some logging
100:5000 early(){
	inds = p1.individuals;
	mP1 = mean(inds.getValue("p"));
	mFr = mean(inds.getValue("fr"));
	mW1 = mean(inds.fitnessScaling);
	if (sim.cycle % 10 == 0.0){
		catn(c(sim.cycle, mW1, mP1, mFr));
	}
	writeFile("log.csv", paste(c(Rep,P,p0,rho,delta,sim.cycle,mP1,mW1),sep=','),append=T);
	thresh = 0.25*O2;
	if (abs(mP1-O2) < thresh){
		sim.simulationFinished();
		catn("Nailed it!");
	}
}



